<?php $__phpratikAyar=array('hesap'=>array('model'=>'user','usernameColumn'=>'username','passwordColumn'=>'password','yetkiColumn'=>'yetkiler','hash'=>'sha1',),'model'=>array('user'=>'root','pass'=>'faruk','dbname'=>'test','host'=>'localhost','type'=>'mysql','charset'=>'utf8','prefix'=>'',),'oturum'=>array('motor'=>'dosya','zaman'=>3600,'klasor'=>'sistem/cache/oturum','yol'=>NULL,),'mcache'=>array('host'=>'localhost','port'=>11211,),'sayfa'=>array('klasor'=>'sayfa/','ayrac'=>'@',),'vt'=>array('user'=>'root','pass'=>'faruk','dbname'=>'test','host'=>'localhost','type'=>'mysql','charset'=>'utf8','prefix'=>'',),); ?><?php class Vt{static function pdox(){Vt::check();return $GLOBALS['_pdox'];}static function check(){if(!isset($GLOBALS['_pdox']))$GLOBALS['_pdox']=new PDOx($GLOBALS['__phpratikAyar']['vt']);}static function sor(){return Vt::pdox();}static function sorgu(){return Vt::pdox();}}class PDOx{public $pdo=null;private $select='*';private $from=null;private $where=null;private $limit=null;private $join=null;private $order_by=null;private $group_by=null;private $having=null;private $num_rows=0;private $insert_id=null;private $query=null;private $error=null;private $result=array();private $prefix=null;private $op=array('=','!=','<','>','<=','>=','<>');public function __construct($config){$config['type']=((@$config['type'])?$config['type']:'mysql');$config['host']=((@$config['host'])?$config['host']:'localhost');$config['charset']=((@$config['charset'])?$config['charset']:'utf8');$config['prefix']=((@$config['prefix'])?$config['prefix']:'');$this->prefix=$config['prefix'];$dsn='';if($config['type']=='mysql'||$config['type']==''||$config['type']=='pgsql'){$dsn=$config['type'].':host='.$config['host'].';dbname='.$config['dbname'];}elseif($config['type']=='sqlite'){$dsn='sqlite:'.$config['dbname'].($config['dbname']==':memory:'?'':'.sqlite');}elseif($config['type']=='oracle'){$dsn='oci:dbname='.$config['host'].'/'.$config['dbname'];}try{$this->pdo=new PDO($dsn,$config['user'],$config['pass']);$charset=$config['charset'];$this->pdo->exec("SET NAMES '".$charset."'");$this->pdo->exec("SET CHARACTER SET '".$charset."'");$this->pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE,PDO::FETCH_OBJ);}catch(PDOException $e){die('Cannot the connect to Database with PDO.<br /><br />'.$e->getMessage());}return $this->pdo;}public function select($select='*'){$this->select=$select;return $this;}public function from($from){$this->from=$this->prefix.$from;return $this;}public function tablo($from){return $this->from($from);}public function join($table,$field1,$op='',$field2='',$join='INNER'){$where=(!in_array($op,$this->op)?$field1.' = '.$op:$field1.' '.$op.' '.$field2);$table=$this->prefix.$table;if(is_null($this->join)){$this->join=" ".$join." JOIN"." ".$table." ON ".$where;}else{$this->join=$this->join." ".$join." JOIN"." ".$table." ON ".$where;}return $this;}public function leftJoin($table,$field1,$op='',$field2=''){$this->join($table,$field1,$op,$field2,'LEFT');return $this;}public function rightJoin($table,$field1,$op='',$field2=''){$this->join($table,$field1,$op,$field2,'RIGHT');return $this;}public function where($where,$op=null,$val=null,$ao='AND'){if(is_array($where)){$_where=array();foreach($where as $column=>$data){$_where[]=$column.'='.$this->escape($data);}$where=implode(' '.$ao.' ',$_where);}else{if(!in_array($op,$this->op)){$where=$where.' = '.$this->escape($op);}else{$where=$where.' '.$op.' '.$this->escape($val);}}if(is_null($this->where)){$this->where=$where;}else{$this->where=$this->where.' '.$ao.' '.$where;}return $this;}public function nerede($where,$op=null,$val=null,$ao='AND'){return $this->where($where,$op,$val,$ao);}public function orWhere($where,$op=null,$val=null){$this->where($where,$op,$val,'OR');return $this;}public function whereIn($field,$keys,$ao=''){if(is_array($keys)){$_keys=array();foreach($keys as $k=>$v){$_keys[]=(is_numeric($v)?$v:$this->escape($v));}$keys=implode(', ',$_keys);if(is_null($this->where)){$this->where=$field.' IN ('.$keys.')';}else{$this->where=$this->where.' AND '.$field.' '.$ao.'IN ('.$keys.')';}}return $this;}public function whereNotIn($field,$keys){$this->where_in($field,$keys,'NOT ');return $this;}public function like($field,$data,$type='%-%',$ao='AND'){$like='';if($type=='-%'){$like=$data.'%';}elseif($type=='%-'){$like='%'.$data;}else{$like='%'.$data.'%';}$like=$this->escape($like);if(is_null($this->where)){$this->where=$field.' LIKE '.$like;}else{$this->where=$this->where.' '.$ao.' '.$field.' LIKE '.$like;}return $this;}public function orLike($field,$data,$type='%-%'){$this->like($field,$data,$type,'OR');return $this;}public function limit($limit,$limitEnd=null){if(!is_null($limitEnd)){$this->limit=$limit.', '.$limitEnd;}else{$this->limit=$limit;}return $this;}public function orderBy($order_by,$order_dir=null){if(!is_null($order_dir)){$this->order_by=$order_by.' '.$order_dir;}else{if(stristr($order_by,' ')||$order_by=='rand()'){$this->order_by=$order_by;}else{$this->order_by=$order_by.' ASC';}}return $this;}public function groupBy($group_by){$this->group_by=$group_by;return $this;}public function having($field,$op=null,$val=null){if(!in_array($op,$this->op)){$this->having=$field.' > '.$this->escape($op);}else{$this->having=$field.' '.$op.' '.$this->escape($val);}return $this;}public function count(){return $this->num_rows;}public function insertId(){return $this->insert_id;}public function error(){$msg='<h1>Database Error</h1>';$msg.='<h4>Query: <em style="font-weight:normal;">"'.$this->query.'"</em></h4>';$msg.='<h4>Error: <em style="font-weight:normal;">'.$this->error.'</em></h4>';die($msg);}public function get($array=false){$query="SELECT ".$this->select." FROM ".$this->from;if(!is_null($this->join)){$query=$query.$this->join;}if(!is_null($this->where)){$query=$query.' WHERE '.$this->where;}if(!is_null($this->group_by)){$query=$query." GROUP BY ".$this->group_by;}if(!is_null($this->having)){$query=$query." HAVING ".$this->having;}if(!is_null($this->order_by)){$query=$query." ORDER BY ".$this->order_by;}$query=$query.' LIMIT 1';return $this->query($query,$array,false);}public function al($array=false){return $this->get($array);}public function getAll($array=false){$query="SELECT ".$this->select." FROM ".$this->from;if(!is_null($this->join)){$query=$query.$this->join;}if(!is_null($this->where)){$query=$query.' WHERE '.$this->where;}if(!is_null($this->group_by)){$query=$query." GROUP BY ".$this->group_by;}if(!is_null($this->having)){$query=$query." HAVING ".$this->having;}if(!is_null($this->order_by)){$query=$query." ORDER BY ".$this->order_by;}$query=(!is_null($this->limit))?$query."  LIMIT ".$this->limit:$query;return $this->query($query,$array);}public function hepsiniAl($array=false){return $this->getAll($array);}public function insert($data){$columns=array_keys($data);$column=implode(',',$columns);$val="".implode(", ",array_map(array($this,'escape'),$data))."";$query='INSERT INTO '.$this->from.' ('.$column.') VALUES ('.$val.')';$query=$this->query($query);if($query){$this->insert_id=$this->pdo->lastInsertId();return $this->insertId();}}public function ekle($d){return $this->insert($d);}public function update($data){$query="UPDATE ".$this->from." SET ";$values=array();foreach($data as $column=>$val){$values[]=$column."=".$this->escape($val)."";}$query=$query.(is_array($data)?implode(',',$values):$data);if(!is_null($this->where)){$query=$query.' WHERE '.$this->where;}if(!is_null($this->order_by)){$query=$query." ORDER BY ".$this->order_by;}$query=(!is_null($this->limit))?$query."  LIMIT ".$this->limit:$query;return $this->query($query);}public function delete(){$query="DELETE FROM ".$this->from;if(!is_null($this->where)){$query=$query.' WHERE '.$this->where;if(!is_null($this->order_by)){$query=$query." ORDER BY ".$this->order_by;}$query=(!is_null($this->limit))?$query."  LIMIT ".$this->limit:$query;}else{$query='TRUNCATE TABLE '.$this->from;}return $this->query($query);}public function sil(){return $this->delete();}public function query($query,$array=false,$all=true){$this->reset();$this->query=preg_replace('/\s\s+|\t\t+/',' ',trim($query));$str=stristr($this->query,'SELECT');if($str){$sql=$this->pdo->query($this->query);if($sql){$this->num_rows=$sql->rowCount();if(($this->num_rows>0)){if($all){while($result=($array==false)?$sql->fetchAll(PDO::FETCH_OBJ):$sql->fetchAll(PDO::FETCH_ASSOC)){$q[]=$result;}$this->result=$q[0];}else{$q=($array==false)?$sql->fetch(PDO::FETCH_OBJ):$sql->fetch(PDO::FETCH_ASSOC);$this->result=$q;}}}else{$this->error=$this->pdo->errorInfo();$this->error=$this->error[2];return $this->error();}}elseif(!$str){$this->result=$this->pdo->query($this->query);if(!$this->result){$this->error=$this->pdo->errorInfo();$this->error=$this->error[2];return $this->error();}}return $this->result;}public function escape($data){return $this->pdo->quote(trim($data));}private function reset(){$this->select='*';$this->from=null;$this->where=null;$this->limit=null;$this->order_by=null;$this->group_by=null;$this->having=null;$this->join=null;$this->num_rows=0;$this->insert_id=null;$this->query=null;$this->error=null;$this->result=array();return;}function __destruct(){$this->pdo=null;}} ?><?php class Mcache{static function check(){if(isset($GLOBALS["__mcache"]))return true;else{$GLOBALS["__mcache"]=new Memcache;$GLOBALS["__mcache"]->connect($GLOBALS['__phpratikAyar']['mcache']['host'],$GLOBALS['__phpratikAyar']['mcache']['port'])or die("MemCached servera baglanilamiyor!");return false;}}static function getClass(){Mcache::check();return $GLOBALS["__mcache"];}static function set($a,$b,$c=null,$d=null){Mcache::check();return $GLOBALS["__mcache"]->set($a,$b,$c,$d);}static function get($a,$b=null){Mcache::check();return $GLOBALS["__mcache"]->get($a,$b);}static function delete($a,$b=null){Mcache::check();return $GLOBALS["__mcache"]->delete($a,$b);}} ?><?php class Oturum{static private $kaydedici;static public $ip;static function check(){if(isset($GLOBALS["_OTURUM"]))return $GLOBALS["phpratik_oturum_kodu"];self::$kaydedici=new OturumKaydedici();self::$ip=self::ip();if(isset($_COOKIE['phpratik'])){Oturum::isValid($_COOKIE['phpratik']);}return Oturum::create();}static function kullan(){return self::check();}static function create(){if(!isset($GLOBALS["_OTURUM"])){$GLOBALS["_OTURUM"]=array();$GLOBALS["_OTURUM"]["ip"]=Oturum::ip();$GLOBALS["_OTURUM"]["user-agent"]=$_SERVER['HTTP_USER_AGENT'];$GLOBALS["_OTURUM"]["creation-time"]=time();}$GLOBALS["_OTURUM"]["zaman"]=time();$GLOBALS["phpratik_oturum_kodu"]=Oturum::generate();setcookie("phpratik",$GLOBALS["phpratik_oturum_kodu"],time()+$GLOBALS['__phpratikAyar']['oturum']['zaman'],$GLOBALS['__phpratikAyar']['oturum']['yol']);return $GLOBALS["phpratik_oturum_kodu"];}static function generate(){return sha1(Oturum::ip().uniqid());}static function load($kod){switch($GLOBALS['__phpratikAyar']['oturum']['motor']){case 'dosya':$file=$GLOBALS['__phpratikAyar']['oturum']['klasor']."/".$kod.".dat";if(is_file(ROOT.$file))return okuDosya($file);else return false;break;case 'mcache':return Mcache::get($GLOBALS['__phpratikAyar']['oturum']['soyad_'].$kod);break;case 'vt':$data=Vt::sorgu()->tablo('oturum')->nerede([$GLOBALS['__phpratikAyar']['oturum']['kodSutunu']=>$kod])->hepsiniAl(true);if(count($data)==0)return false;else return $data[0][$GLOBALS['__phpratikAyar']['oturum']['veriSutunu']];break;default:return false;break;}}static function kaydet(){switch($GLOBALS['__phpratikAyar']['oturum']['motor']){case 'dosya':if(isset($GLOBALS["_OTURUM"]["kod"])){$file=ROOT.$GLOBALS['__phpratikAyar']['oturum']['klasor']."/".$GLOBALS["_OTURUM"]["kod"].".dat";if(is_file($file))unlink($file);}$file=$GLOBALS['__phpratikAyar']['oturum']['klasor']."/".$GLOBALS["phpratik_oturum_kodu"].".dat";$GLOBALS["_OTURUM"]["kod"]=$GLOBALS["phpratik_oturum_kodu"];yazDosya($file,serialize($GLOBALS["_OTURUM"]));break;case 'mcache':if(isset($GLOBALS["_OTURUM"]["kod"]))Mcache::delete($GLOBALS['__phpratikAyar']['oturum']['soyad_'].$GLOBALS["_OTURUM"]["kod"]);$GLOBALS["_OTURUM"]["kod"]=$GLOBALS["phpratik_oturum_kodu"];Mcache::set($GLOBALS['__phpratikAyar']['oturum']['soyad_'].$GLOBALS["phpratik_oturum_kodu"],serialize($GLOBALS["_OTURUM"]));break;case 'vt':if(isset($GLOBALS["_OTURUM"]["kod"]))Vt::sorgu()->tablo($GLOBALS['__phpratikAyar']['oturum']['tablo'])->nerede($GLOBALS['__phpratikAyar']['oturum']['kodSutunu'],"=",$GLOBALS["_OTURUM"]["kod"])->sil();$GLOBALS["_OTURUM"]["kod"]=$GLOBALS["phpratik_oturum_kodu"];Vt::sor()->tablo($GLOBALS['__phpratikAyar']['oturum']['tablo'])->ekle([$GLOBALS['__phpratikAyar']['oturum']['kodSutunu']=>$GLOBALS["phpratik_oturum_kodu"],$GLOBALS['__phpratikAyar']['oturum']['veriSutunu']=>serialize($GLOBALS["_OTURUM"])]);break;}}static function isValid($kod){if(strlen($kod)!=40)return false;$load=Oturum::load($kod);if($load===false)return false;$GLOBALS['_OTURUM']=unserialize($load);if($GLOBALS['_OTURUM']["ip"]!=self::$ip)return false;return true;}static function kod(){return $GLOBALS["phpratik_oturum_kodu"];}static function bilgi($veri){if(!isset($GLOBALS["_OTURUM"]))Oturum::check();return isset($GLOBALS["_OTURUM"][$veri])?$GLOBALS["_OTURUM"][$veri]:false;}static function get($v){return Oturum::bilgi($v);}static function al($v){return Oturum::bilgi($v);}static function yaz($degisken,$veri){if(!isset($GLOBALS["_OTURUM"]))Oturum::check();$GLOBALS["_OTURUM"][$degisken]=$veri;}static function set($v,$d){return Oturum::yaz($v,$d);}static function ip(){if(getenv("HTTP_CLIENT_IP")){$ip=getenv("HTTP_CLIENT_IP");}elseif(getenv("HTTP_X_FORWARDED_FOR")){$ip=getenv("HTTP_X_FORWARDED_FOR");if(strstr($ip,',')){$tmp=explode(',',$ip);$ip=trim($tmp[0]);}}else{$ip=getenv("REMOTE_ADDR");}return $ip;}}class OturumKaydedici{public function __destruct(){Oturum::kaydet();}} ?><?php class Model{public static $_db;protected static $_stmt=array();protected static $_identifier_quote_character=null;private static $_tableColumns=array();protected static $_primary_column_name='id';protected static $_tableName=null;function __construct(array $data=array()){if(isset($GLOBALS["isCaching"]))return;static::getFieldnames();if(is_array($data)){$this->hydrate($data);}}public static function getTables(){$alltables=static::$_db->query("show tables",PDO::FETCH_NUM);$return=array();while($result=$alltables->fetch()){array_push($return,$result[0]);}return $return;}static function cache(){return array('kullan');}static function kullan(){global $__sayfa;static::baglan();$tablolar=static::getTables();$dahiledilecektablolar=array();foreach($tablolar as $tablo){if(!is_bool(strpos($__sayfa,$tablo.'::'))||!is_bool(strpos($__sayfa,'new '.$tablo))){array_push($dahiledilecektablolar,$tablo);}}$kod="";foreach($dahiledilecektablolar as $tablo){if(is_file(ROOT."model/".$tablo.".php")){$kod.=substr(okuDosya("model/".$tablo.".php"),5);}else{yazDosya("model/".$tablo.".php","<?php
class $tablo extends Model{
          static protected ".'$_tableName'." = '$tablo';
}
        ");$kod.=substr(okuDosya("model/".$tablo.".php"),5);}}return $kod."Model::baglan()";}public static function baglan(){$dsn='';if($GLOBALS['__phpratikAyar']['model']['type']=='mysql'||$GLOBALS['__phpratikAyar']['model']['type']==''||$GLOBALS['__phpratikAyar']['model']['type']=='pgsql'){$dsn=$GLOBALS['__phpratikAyar']['model']['type'].':host='.$GLOBALS['__phpratikAyar']['model']['host'].';dbname='.$GLOBALS['__phpratikAyar']['model']['dbname'];}elseif($GLOBALS['__phpratikAyar']['model']['type']=='sqlite'){$dsn='sqlite:'.$GLOBALS['__phpratikAyar']['model']['dbname'].($GLOBALS['__phpratikAyar']['model']['dbname']==':memory:'?'':'.sqlite');}elseif($GLOBALS['__phpratikAyar']['model']['type']=='oracle'){$dsn='oci:dbname='.$GLOBALS['__phpratikAyar']['model']['host'].'/'.$GLOBALS['__phpratikAyar']['model']['dbname'];}static::$_db=new PDO($dsn,$GLOBALS['__phpratikAyar']['model']['user'],$GLOBALS['__phpratikAyar']['model']['pass']);static::$_db->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);static::$_db>exec("SET NAMES '".$GLOBALS['__phpratikAyar']['model']['charset']."'");static::$_db->exec("SET CHARACTER SET '".$GLOBALS['__phpratikAyar']['model']['charset']."'");static::$_db->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE,PDO::FETCH_OBJ);static::_setup_identifier_quote_character();}public static function _setup_identifier_quote_character(){if(is_null(static::$_identifier_quote_character)){static::$_identifier_quote_character=static::_detect_identifier_quote_character();}}protected static function _detect_identifier_quote_character(){switch(static::getDriverName()){case 'pgsql':case 'sqlsrv':case 'dblib':case 'mssql':case 'sybase':return '"';case 'mysql':case 'sqlite':case 'sqlite2':default:return '`';}}protected static function getDriverName(){if(!static::$_db){throw new Exception('No database connection setup');}return static::$_db->getAttribute(PDO::ATTR_DRIVER_NAME);}protected static function _quote_identifier($identifier){$class=get_called_class();$parts=explode('.',$identifier);$parts=array_map(array($class,'_quote_identifier_part'),$parts);return join('.',$parts);}protected static function _quote_identifier_part($part){if($part==='*'){return $part;}return static::$_identifier_quote_character.$part.static::$_identifier_quote_character;}protected static function getFieldnames(){$class=get_called_class();if(!isset(self::$_tableColumns[$class])){$st=static::execute('DESCRIBE '.static::_quote_identifier(static::$_tableName));self::$_tableColumns[$class]=$st->fetchAll(PDO::FETCH_COLUMN);}return self::$_tableColumns[$class];}public function hydrate($data){foreach(static::getFieldnames()as $fieldname){if(isset($data[$fieldname])){$this->$fieldname=$data[$fieldname];}else if(!isset($this->$fieldname)){$this->$fieldname=null;}}}public function clear(){foreach(static::getFieldnames()as $fieldname){$this->$fieldname=null;}}public function __sleep(){return static::getFieldnames();}public function toArray(){$a=array();foreach(static::getFieldnames()as $fieldname){$a[$fieldname]=$this->$fieldname;}return $a;}static public function getById($id){return static::fetchOneWhere(static::_quote_identifier(static::$_primary_column_name).' = ?',array($id));}static public function al($id){return static::getById($id);}static public function first(){return static::fetchOneWhere('1=1 ORDER BY '.static::_quote_identifier(static::$_primary_column_name).' ASC');}static public function last(){return static::fetchOneWhere('1=1 ORDER BY '.static::_quote_identifier(static::$_primary_column_name).' DESC');}static public function find($id){$find_by_method='find_by_'.(static::$_primary_column_name);static::$find_by_method($id);}static public function __callStatic($name,$arguments){if(preg_match('/^find_by_/',$name)==1){$fieldname=substr($name,8);$match=$arguments[0];if(is_array($match)){return static::fetchAllWhere(static::_quote_identifier($fieldname).' IN ('.static::createInClausePlaceholders($match).')',$match);}else{return static::fetchAllWhere(static::_quote_identifier($fieldname).' = ?',array($match));}}else if(preg_match('/^findOne_by_/',$name)==1){$fieldname=substr($name,11);$match=$arguments[0];if(is_array($match)){return static::fetchOneWhere(static::_quote_identifier($fieldname).' IN ('.static::createInClausePlaceholders($match).')',$match);}else{return static::fetchOneWhere(static::_quote_identifier($fieldname).' = ?',array($match));}}else if(preg_match('/^first_by_/',$name)==1){$fieldname=substr($name,9);$match=$arguments[0];if(is_array($match)){return static::fetchOneWhere(static::_quote_identifier($fieldname).' IN ('.static::createInClausePlaceholders($match).') ORDER BY '.static::_quote_identifier($fieldname).' ASC',$match);}else{return static::fetchOneWhere(static::_quote_identifier($fieldname).' = ? ORDER BY '.static::_quote_identifier($fieldname).' ASC',array($match));}}else if(preg_match('/^last_by_/',$name)==1){$fieldname=substr($name,8);$match=$arguments[0];if(is_array($match)){return static::fetchOneWhere(static::_quote_identifier($fieldname).' IN ('.static::createInClausePlaceholders($match).') ORDER BY '.static::_quote_identifier($fieldname).' DESC',$match);}else{return static::fetchOneWhere(static::_quote_identifier($fieldname).' = ? ORDER BY '.static::_quote_identifier($fieldname).' DESC',array($match));}}else if(preg_match('/^count_by_/',$name)==1){$fieldname=substr($name,9);$match=$arguments[0];if(is_array($match)){return static::countAllWhere(static::_quote_identifier($fieldname).' IN ('.static::createInClausePlaceholders($match).')',$match);}else{return static::countAllWhere(static::_quote_identifier($fieldname).' = ?',array($match));}}throw new \Exception(__CLASS__.' not such static method['.$name.']');}static public function createInClausePlaceholders($params){return implode(',',array_fill(0,count($params),'?'));}static public function count(){$st=static::execute('SELECT COUNT(*) FROM '.static::_quote_identifier(static::$_tableName));return $st->fetchColumn();}static public function countAllWhere($SQLfragment='',$params=array()){if($SQLfragment){$SQLfragment=' WHERE '.$SQLfragment;}$st=static::execute('SELECT COUNT(*) FROM '.static::_quote_identifier(static::$_tableName).$SQLfragment,$params);return $st->fetchColumn();}static public function fetchAllWhere($SQLfragment='',$params=array()){$class=get_called_class();if($SQLfragment){$SQLfragment=' WHERE '.$SQLfragment;}$st=static::execute('SELECT * FROM '.static::_quote_identifier(static::$_tableName).$SQLfragment,$params);$st->setFetchMode(PDO::FETCH_CLASS,$class);return $st->fetchAll();}public static function hepsiniBul($SQLfragment='',$params=array()){return static::fetchAllWhere($SQLfragment,$params);}static public function fetchOneWhere($SQLfragment='',$params=array()){$class=get_called_class();if($SQLfragment){$SQLfragment=' WHERE '.$SQLfragment;}$st=static::execute('SELECT * FROM '.static::_quote_identifier(static::$_tableName).$SQLfragment.' LIMIT 1',$params);$st->setFetchMode(PDO::FETCH_CLASS,$class);return $st->fetch();}public static function tekiniBul($SQLfragment='',$params=array()){return static::fetchOneWhere($SQLfragment,$params);}static public function deleteById($id){$st=static::execute('DELETE FROM '.static::_quote_identifier(static::$_tableName).' WHERE '.static::_quote_identifier(static::$_primary_column_name).' = ? LIMIT 1',array($id));return($st->rowCount()==1);}public function delete(){return self::deleteById($this->{static::$_primary_column_name});}public function sil(){return self::deleteById($this->{static::$_primary_column_name});}static public function deleteAllWhere($where,$params=array()){$st=static::execute('DELETE FROM '.static::_quote_identifier(static::$_tableName).' WHERE '.$where,$params);return $st;}static public function validate(){return true;}public function insert($autoTimestamp=true,$allowSetPrimaryKey=false){$pk=static::$_primary_column_name;$timeStr=gmdate('Y-m-d H:i:s');if($autoTimestamp&&in_array('created_at',static::getFieldnames())){$this->created_at=$timeStr;}if($autoTimestamp&&in_array('updated_at',static::getFieldnames())){$this->updated_at=$timeStr;}$this->validate();if($allowSetPrimaryKey!==true){$this->$pk=null;}$query='INSERT INTO '.static::_quote_identifier(static::$_tableName).' SET '.$this->setString(!$allowSetPrimaryKey);$st=static::execute($query);if($st->rowCount()==1){$this->{static::$_primary_column_name}=static::$_db->lastInsertId();}return($st->rowCount()==1);}public function update($autoTimestamp=true){if($autoTimestamp&&in_array('updated_at',static::getFieldnames())){$this->updated_at=gmdate('Y-m-d H:i:s');}$this->validate();$query='UPDATE '.static::_quote_identifier(static::$_tableName).' SET '.$this->setString().' WHERE '.static::_quote_identifier(static::$_primary_column_name).' = ? LIMIT 1';$st=static::execute($query,array($this->{static::$_primary_column_name}));return($st->rowCount()==1);}public static function execute($query,$params=array()){$st=static::_prepare($query);$st->execute($params);return $st;}private static function _prepare($query){if(!isset(static::$_stmt[$query])){static::$_stmt[$query]=static::$_db->prepare($query);}return static::$_stmt[$query];}public function save(){if($this->{static::$_primary_column_name}){return $this->update();}else{return $this->insert();}}public function kaydet(){return $this->save();}protected function setString($ignorePrimary=true){$sqlFragment=false;$fragments=array();foreach(static::getFieldnames()as $field){if($ignorePrimary&&$field==static::$_primary_column_name)continue;if(isset($this->$field)){if($this->$field===null){$fragments[]=static::_quote_identifier($field).' = NULL';}else{$fragments[]=static::_quote_identifier($field).' = '.static::$_db->quote($this->$field);}}}$sqlFragment=implode(", ",$fragments);return $sqlFragment;}static function datetimeToMysqldatetime($dt){$dt=(is_string($dt))?strtotime($dt):$dt;return date('Y-m-d H:i:s',$dt);}} ?><?php class Hesap{static public $sahibi;static public $online=false;static function cache(){return array('kullan');}static function kullan(){global $__sayfa;if(strpos($__sayfa,"Model::kullan")===false)return "Model::kullan();Hesap::\$sahibi = ".$GLOBALS["__phpratikAyar"]["hesap"]["model"]."::al(".'Oturum::get("hesap_id")'.");Hesap::kontrol();";else return "Hesap::\$sahibi = ".$GLOBALS["__phpratikAyar"]["hesap"]["model"]."::al(".'Oturum::get("hesap_id")'.");Hesap::kontrol();";}static function kontrol(){var_dump(self::$sahibi);}static function login($username,$password){}static function logout(){}static function setPassword($password){}static function yetkilimi(){return false;}} ?><?php class H{static function arr2table($arr,$att=false){$html="";foreach($arr as $sat){$html.="<tr>";foreach($sat as $sut){$html.="<td>$sut</td>";}$html.="<tr>";}return xml("table",$html,$att);}static function xml($tag,$data=false,$att=false){$at="";if($att){foreach($att as $key=>$value){$at.=" ".$key.'="'.$value.'"';}}if($data)return"<$tag$at>$data</$tag>";return"<$tag$att/>";}static function FormOpen($att=false,$csrf=true){$at="";if($att){foreach($att as $key=>$value){$at.=" ".$key.'="'.$value.'"';}}if($csrf)return"<FORM$at>";else return"<FORM$at>";}static function FormClose(){return "</FORM>";}static function csrf(){}} ?><?php class Girdi{static function varsa($girdiAd){if(isset($_GET[$girdiAd])||isset($_POST[$girdiAd]))return true;return false;}static function al($girdiAd){if(Girdi::metod($girdiAd))return $_POST[$girdiAd];else return $_GET[$girdiAd];}static function metod($girdiAd){if(isset($_POST[$girdiAd]))return true;return false;}static function gerekliGET($arr){$GLOBALS['__gerekliGET']=$arr;foreach($arr as $girdi){if(!isset($_GET[$girdi])){require_once 'sistem/fonksiyon/400.php';break;}}}static function gerekliPOST($arr){$GLOBALS['__gerekliPOST']=$arr;foreach($arr as $girdi){if(!isset($_POST[$girdi])){require_once 'sistem/fonksiyon/400.php';break;}}}static function hepsiniAl(){if(isset($GLOBALS['__gerekliGET']))foreach($GLOBALS['__gerekliGET']as $girdi){$GLOBALS[$girdi]=$_GET[$girdi];}if(isset($GLOBALS['__gerekliPOST']))foreach($GLOBALS['__gerekliPOST']as $girdi){$GLOBALS[$girdi]=$_POST[$girdi];}}} ?><?php  ?><htm kodları>

<script type="text/javascript" src="js/aa.js"></script>
<?php Oturum::set("elme","armut".uniqid());var_dump(Oturum::get("elme"));$d=Mcache::get("ben");var_dump($d);echo "<hr>";class user extends Model{static protected $_tableName='user';static function dene(){echo "hello!";}}Model::baglan();Hesap::$sahibi=user::al(Oturum::get("hesap_id"));Hesap::kontrol();$a=new user();var_dump(Model::getTables());$ali=array('ahmet','mehmet','süleyman');echo H::xml("a",'Tıkla',array('href'=>'')); ?><!doctype html>
<!  بِسْــــــــــــــــــــــمِ اﷲِارَّحْمَنِ ارَّحِيم >
<html lang="tr">
<head>
	<meta charset="UTF-8"/>
	<title>
	Alt Sayfadan Gelen Başlığımız
</title>
</head>

d
<h1>
	menüler buraya gelir
</h1>

<br>
<h2> Burada ornek sayfasınını dahil ediyoruz</h2>
<br>
<?php  ?>

SAYFAlarda mantıksal ve döngüsel kullanımlar <br>

<?php if(false){ ?>
	if-oldu lan !
<?php }elseif(true){ ?>
	elseif-habi oldu
<?php } ?>

<br>




<?php if(false){ ?>
olmadı
<?php }else{ ?>
<b>else-oldu!!!</b>
<?php } ?>

<br>

<?php for($i=0;$i<5;$i++){ ?>
	<?php echo($i+1); ?> . şey
<?php } ?>

<br><br>


bir arrayi foreach ile bastıralım:

<?php foreach($ali as $a){ ?>
	<?php echo var_dump($a); ?>
<?php } ?>

<br>

Sayfa2 : <?php echo $sayfa2; ?>

3 süslü parantez sayfaya bastırılmaz -|<?php $i=6;$b=0;$c=50; ?>|- <br>



<?php echo $i; ?> ' den geri say :


<?php while($i--){ ?>
	<?php echo $i; ?> -
<?php } ?>


C değeri : <?php echo $c; ?>


<?php  ?><i> ornek 2 sayfası dahil edildi <?php echo $b='cem'; ?> </i><?php ; ?>

<?php ; ?>
<br>
<br>dd
<br> url den gelen değişken<br>

<b><i><?php echo isset($sayfa)?$sayfa:'birşeygelmedi'; ?></b></i>

<h3>
	alt menüler gelir
</h3>



</html><?php ;Girdi::hepsiniAl(); ?><i> ornek 2 sayfası dahil edildi <?php echo $b='cem'; ?> </i><?php ;echo isset($ahmet)?$ahmet:'<br>naber'; ?>
ss
gene html
s
